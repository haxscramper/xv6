version: 3

vars:
  OBJS:
    bio.o
    console.o
    exec.o
    file.o
    fs.o
    ide.o
    ioapic.o
    kalloc.o
    kbd.o
    lapic.o
    log.o
    main.o
    mp.o
    picirq.o
    pipe.o
    proc.o
    sleeplock.o
    spinlock.o
    string.o
    swtch.o
    syscall.o
    sysfile.o
    sysproc.o
    trapasm.o
    trap.o
    uart.o
    vectors.o
    vm.o

  CC: clang++
  AS: gas
  LD: ld
  # NOTE clang allows C99 designated initializers

  # TODO stack protector flag is not always present
  # in some compilers, original makefile checks for
  # it's presence
  CFLAGS: "@{{.PWD}}/cflags.txt"

  ASFLAGS: -m32 -gdwarf-2 -Wa,-divide
  LDFLAGS: "@{{.PWD}}/ldflags.txt"
    # $(shell $(LD) -V | grep elf_i386 2>/dev/null | head -n 1)
  OBJCOPY: objcopy
  OBJDUMP: objdump
  QEMU: qemu-system-i386
  QEMUOPTS:
    -drive file=fs.img,index=1,media=disk,format=raw
    -drive file=xv6.img,index=0,media=disk,format=raw
    -smp 2 -m 512 {{.QEMUEXTRA}}

tasks:
  uprogs:
    dir: uprogs/build
    cmds:
      - cmake -GNinja ..
      - ninja -t graph | dot -o graph.png
      - ninja

  
  qemu-nox:
    deps: [xv6.img, fs.img]
    cmds:
      - >
        {{.QEMU}} -nographic {{.QEMUOPTS}}

  images:
    deps: [xv6.img, fs.img]

  mkfs:
    cmds:
      - >
        {{.CC}} -o mkfs mkfs.cpp

  fs.img:
    desc: "Build filesystem drive image"
    deps: [mkfs, uprogs]
    cmds:
      - ./mkfs fs.img README {{.PWD}}/uprogs/exe/*

  xv6.img:
    desc: "Build Xv6 kernel image"
    deps: [bootblock, kernel]
    cmds:
      - dd if=/dev/zero of=xv6.img count=10000
      - dd if=bootblock of=xv6.img conv=notrunc
      - dd if=kernel of=xv6.img seek=1 conv=notrunc

  xv6memfs.img:
    deps: [bootblock, kernelmemfs]
    cmds:
      - dd if=/dev/zero of=xv6memfs.img count=10000
      - dd if=bootblock of=xv6memfs.img conv=notrunc
      - dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc

  bootblock:
    desc: "Build boot block"
    cmds:
      - >
        {{.CC}} {{.CFLAGS}} -fno-pic -O -nostdinc -I. -c bootmain.cpp
      - >
        {{.CC}} {{.CFLAGS}} -fno-pic -nostdinc -I. -c bootasm.S
      - >
        {{.LD}}
        {{.LDFLAGS}}
        -N
        -e start
        -Ttext 0x7C00
        -o bootblock.o bootasm.o bootmain.o

      - >
        {{.OBJDUMP}} -S bootblock.o > bootblock.asm
      - >
        {{.OBJCOPY}} -S -O binary -j .text bootblock.o bootblock
      - >
        ./sign.pl bootblock

  entryother:
    cmds:
      - >
        {{.CC}} {{.CFLAGS}} -fno-pic -nostdinc -I. -c entryother.S
      - >
        {{.LD}}
        {{.LDFLAGS}}
        -N -e start
        -Ttext 0x7000
        -o bootblockother.o entryother.o

      - >
        {{.OBJCOPY}} -S -O binary -j .text bootblockother.o entryother
      - >
        {{.OBJDUMP}} -S bootblockother.o > entryother.asm

  initcode:
    cmds:
      - >
        {{.CC}} {{.CFLAGS}} -nostdinc -I. -c initcode.S
      - >
        {{.LD}} {{.LDFLAGS}} -N -e start -Ttext 0 -o initcode.out initcode.o
      - >
        {{.OBJCOPY}} -S -O binary initcode.out initcode
      - >
        {{.OBJDUMP}} -S initcode.o > initcode.asm

  kernel:
    deps: [objs, entryother, initcode]

    # {{.OBJS}} entry.o entryother initcode kernel.ld

    cmds:
      # Compile kerel binary using `entry.o`, all other objects etc. `-b`
      # flag specifies binary format for the subsequent input files.
      - >
        {{.LD}}
        {{.LDFLAGS}}
        -T kernel.ld
        -o kernel
        entry.o {{.OBJS}}
        -b binary initcode entryother

      - >
        {{.OBJDUMP}} -S kernel > kernel.asm
      - >
        {{.OBJDUMP}} -t kernel |
        sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kernel.sym

  objs:
    deps: [vectors]
    desc: "Build object files"
    cmds:
      - >
        for file in *.cpp; do
          {{.CC}} {{.CFLAGS}} -c $file
        done

        for file in *.S; do
          {{.CC}} {{.CFLAGS}} -c $file
        done

  vectors:
    cmds:
      - ./vectors.pl > vectors.S

  clean:
    cmds:
      - >
        rm -rf
        *.tex
        *.dvi
        *.idx
        *.aux
        *.log
        *.ind
        *.ilg
        *.o
        *.d
        *.asm
        *.sym
        vectors.S
        bootblock
        entryother
        initcode
        initcode.out
        kernel
        xv6.img
        fs.img
        kernelmemfs
        xv6memfs.img
        mkfs
        uprogs/build
        uprogs/exe
        .gdbinit

  tags:
    deps: [objs, _init]
    sources:
      - entryother.S
    cmds:
      - etags *.S *.c

  vector.S:
    sources:
      - vector.pl

    cmds:
      - ./vector.pl > vector.S
