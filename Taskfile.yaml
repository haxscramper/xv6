version: 3

vars:
  CC: clang++
  AS: gas
  LD: ld
  # NOTE clang allows C99 designated initializers
  CFLAGS:
    -std=c++20
    -fno-pie
    -fno-pic
    -static
    -fno-builtin
    -fno-strict-aliasing
    -O2
    -Wall
    -MD
    -ggdb
    -m32
    -Werror
    -fno-omit-frame-pointer
    -Wno-array-bounds
    -Wno-sign-compare
    -Wno-c99-designator
    -fno-stack-protector # TODO stack protector flag is not always present
                         # in some compilers, original makefile checks for
                         # it's presence

  ASFLAGS: -m32 -gdwarf-2 -Wa,-divide
  LDFLAGS: -m elf_i386
    # $(shell $(LD) -V | grep elf_i386 2>/dev/null | head -n 1)
  OBJCOPY: objcopy
  OBJDUMP: objdump

tasks:
  xv6.img:
    desc: "Build final xv6 image"
    deps: [bootblock, kernel]
    cmds:
      - dd if=/dev/zero of=xv6.img count=10000
      - dd if=bootblock of=xv6.img conv=notrunc
      - dd if=kernel of=xv6.img seek=1 conv=notrunc

  xv6memfs.img:
    deps: [bootblock, kernelmemfs]
    cmds:
      - dd if=/dev/zero of=xv6memfs.img count=10000
      - dd if=bootblock of=xv6memfs.img conv=notrunc
      - dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc

  bootblock:
    desc: "Build boot block"
    sources:
      - bootasm.S
      - bootmain.cpp
    cmds:
      - >
        {{.CC}} {{.CFLAGS}} -fno-pic -O -nostdinc -I. -c bootmain.cpp
      - >
        {{.CC}} {{.CFLAGS}} -fno-pic -nostdinc -I. -c bootasm.S
      - >
        {{.LD}}
        {{.LDFLAGS}}
        -N
        -e start
        -Ttext 0x7C00
        -o bootblock.o bootasm.o bootmain.o

      - >
        {{.OBJDUMP}} -S bootblock.o > bootblock.asm
      - >
        {{.OBJCOPY}} -S -O binary -j .text bootblock.o bootblock
      - >
        ./sign.pl bootblock

  entryother:
    sources:
      - entryother.S
    cmds:
      - >
        {{.CC}} {{.CFLAGS}} -fno-pic -nostdinc -I. -c entryother.S
      - >
        {{.LD}}
        {{.LDFLAGS}}
        -N -e start
        -Ttext 0x7000
        -o bootblockother.o entryother.o

      - >
        {{.OBJCOPY}} -S -O binary -j .text bootblockother.o entryother
      - >
        {{.OBJDUMP}} -S bootblockother.o > entryother.asm

  initcode:
    sources:
      - initcode.S
    cmds:
      - >
        {{.CC}} {{.CFLAGS}} -nostdinc -I. -c initcode.S
      - >
        {{.LD}} {{.LDFLAGS}} -N -e start -Ttext 0 -o initcode.out initcode.o
      - >
        {{.OBJCOPY}} -S -O binary initcode.out initcode
      - >
        {{.OBJDUMP}} -S initcode.o > initcode.asm

  kernel:
    deps: [objs, entryother, initcode]

    # {{.OBJS}} entry.o entryother initcode kernel.ld
    cmds:
      - >
        {{.LD}}
        {{.LDFLAGS}}
        -T kernel.ld
        -o kernel entry.o {{.OBJS}}
        -b binary initcode entryother

      - >
        {{.OBJDUMP}} -S kernel > kernel.asm
      - >
        {{.OBJDUMP}} -t kernel |
        sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > kernel.sym

  objs:
    desc: "Build object files"
    cmds:
      - >
        for file in *.cpp; do
          {{.CC}} {{.CFLAGS}} -c $file
        done


  clean:
    cmds:
      - >
        rm -f
        *.tex
        *.dvi
        *.idx
        *.aux
        *.log
        *.ind
        *.ilg
        *.o
        *.d
        *.asm
        *.sym
        vectors.S
        bootblock
        entryother
        initcode
        initcode.out
        kernel
        xv6.img
        fs.img
        kernelmemfs
        xv6memfs.img
        mkfs
        .gdbinit
        {{.UPROGS}}

  tags:
    deps: [objs, _init]
    sources:
      - entryother.S
    cmds:
      - etags *.S *.c

  vector.S:
    sources:
      - vector.pl

    cmds:
      - ./vector.pl > vector.S
